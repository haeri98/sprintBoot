<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.3.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<context:component-scan base-package="com.naver.board" />
	
	<!-- 프로퍼티 파일을 이용해서 값을 주입하는 방법
		1. context 네임스페이스의 property-placeholder 태그를 추가하고
			앞에서 만든 프로퍼티 파일의 위치를 지정
		2. Controller에서 @value을 이용해서 값을 가져옵니다.
			@value 애노테이션의 주요 용도는 자바 코드 위부의 리소스나 환경정보에
			담긴 값을 사용하도록 지정해주는데 있습니다. -->
	<context:property-placeholder location="classpath:pro/savefolder.properties"/>
	
	<!-- 주기적인 작업이 있을 때 @Scheduled 애노테이션을 사용하면 쉽게 적용할 수 있습니다. -->
	<task:annotation-driven/>
	
	<beans:bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />
	
	<beans:bean id="beforelog" class="com.naver.board.common.BeforeAdvice"/>
 	<aop:config>
 		<aop:pointcut id="allPointcut"
 						expression="execution(* com.naver.board..*Impl.*(..))"/>
 		<aop:pointcut id="getPointcut"
 						expression="execution(* com.naver.board..*Impl.get*(..))"/>
 		<aop:aspect ref="beforelog">
 			<aop:before pointcut-ref="allPointcut" method="beforeLog"/>
 		</aop:aspect>
 	</aop:config>
 	
 	<beans:bean id="afterlog" class="com.naver.board.common.AfterAdvice"/>
 	<aop:config>
 		<aop:pointcut id="allPointcut2"
 						expression="execution(* com.naver.board..*Impl.*(..))"/>
 		<aop:pointcut id="getPointcut2"
 						expression="execution(* com.naver.board..*Impl.get*(..))"/>
 		<aop:aspect ref="afterlog">
 			<aop:after pointcut-ref="allPointcut2" method="afterlog"/>
 		</aop:aspect>
 	</aop:config>
 	
 	<beans:bean id="aroundlog" class="com.naver.board.common.AroundAdvice"/>
 	<aop:config>
 		<aop:pointcut id="allPointcut3"
 						expression="execution(* com.naver.board..*Impl.*(..))"/>
 		<aop:pointcut id="getPointcut3"
 						expression="execution(* com.naver.board..*Impl.get*(..))"/>
 		<aop:aspect ref="aroundlog">
			<aop:around pointcut-ref="allPointcut3" method="aroundLog"/>
		</aop:aspect>
 	</aop:config>
 	
 	<!-- public void afterReturningLog(Object obj){
 		매개변수로 사용하는 obj가 returning="obj" 입니다.
 		returning="obj1"로 작성하면 아래와 같은 오류 발생
 		Returning argument name 'obj1'
 		was not bound in advice arguments -->
 	<beans:bean id="afterreturnlog" class="com.naver.board.common.AfterReturningAdvice"/>
 	<aop:config>
 		<aop:pointcut id="getPointcut4"
 						expression="execution(* com.naver.board..*Impl.get*(..))"/>
 		<aop:aspect ref="afterreturnlog">
			<aop:after-returning pointcut-ref="getPointcut4" method="afterReturninglog" returning="obj" />
		</aop:aspect>
 	</aop:config>
 	
 	<beans:bean id="afterThrowing" class="com.naver.board.common.AfterThrowingAdvice"/>
 	<aop:config>
 		<aop:pointcut id="getPointcut5"
 						expression="execution(* com.naver.board..*Impl.get*(..))"/>
 		<aop:aspect ref="afterThrowing">
			<aop:after-throwing pointcut-ref="getPointcut5" method="afterThrowinglog" throwing="exp"/>
		</aop:aspect>
 	</aop:config>

</beans:beans>